{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/adminx/Documents/card game/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport Card from \"./Card\";\nimport { cardsData } from \"../cards\";\nimport { useEffect, useState } from \"react\";\n\nfunction Game() {\n  _s();\n\n  const [cards, setCards] = useState(cardsData);\n  const [gameLock, setGameLock] = useState(false);\n\n  const cardClick = id => {\n    if (!gameLock) {\n      let tempcards = [...cards];\n      const itemFinder = tempcards.findIndex(item => item.id === id);\n      const isFlipped = tempcards[itemFinder].isFlipped;\n      tempcards[itemFinder] = { ...tempcards[itemFinder],\n        isFlipped: !isFlipped,\n        found: false\n      };\n      setCards([...tempcards]);\n    }\n  };\n\n  useEffect(() => {\n    const flippedCards = cards.filter(item => item.isFlipped === true && item.found === false);\n\n    if (flippedCards.length === 2) {\n      if (flippedCards[0].name === flippedCards[1].name) {\n        found(flippedCards[0].id, flippedCards[1].id);\n      } else {\n        setGameLock(true);\n        setTimeout(() => {\n          setGameLock(false);\n        }, 1500);\n      }\n    }\n  }, [cards]);\n\n  function found(firstCardId, secondCardId) {\n    let tempcards = [...cards];\n    const itemFinder1 = tempcards.findIndex(item => item.id === firstCardId);\n    const itemFinder2 = tempcards.findIndex(item => item.id === secondCardId);\n    tempcards[itemFinder1].found = true;\n    tempcards[itemFinder2].found = true;\n    setCards([...tempcards]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"memory-game\",\n    children: [console.log(cards), cards.map(item => /*#__PURE__*/_jsxDEV(Card, {\n      card: item,\n      onClick: () => cardClick(item.id)\n    }, item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 28\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Game, \"0uKsZ/JkcJiM+gmenFPQTt11rFE=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/home/adminx/Documents/card game/src/components/Game.js"],"names":["Card","cardsData","useEffect","useState","Game","cards","setCards","gameLock","setGameLock","cardClick","id","tempcards","itemFinder","findIndex","item","isFlipped","found","flippedCards","filter","length","name","setTimeout","firstCardId","secondCardId","itemFinder1","itemFinder2","console","log","map"],"mappings":"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","sourcesContent":["import Card from \"./Card\";\nimport {cardsData} from \"../cards\";\nimport {useEffect, useState} from \"react\";\n\nfunction Game() {\n\n    const [cards,setCards] = useState(cardsData)\n    const [gameLock,setGameLock] = useState(false)\n\n\n    const cardClick = (id) => {\n        if (!gameLock){\n            let tempcards = [...cards]\n            const itemFinder = tempcards.findIndex(item => item.id === id)\n            const isFlipped = tempcards[itemFinder].isFlipped\n\n            tempcards[itemFinder] = {...tempcards[itemFinder] , isFlipped : !isFlipped , found : false}\n            setCards([...tempcards])\n        }\n    }\n\n    useEffect(()=> {\n        const flippedCards = cards.filter(item => item.isFlipped === true && item.found === false)\n        if (flippedCards.length === 2){\n            if (flippedCards[0].name === flippedCards[1].name){\n                found(flippedCards[0].id , flippedCards[1].id)\n            }else {\n                setGameLock(true)\n                setTimeout(()=> {\n                    setGameLock(false)\n                    \n                },1500)\n            }\n        }\n    },[cards])\n\n    function found(firstCardId , secondCardId) {\n        let tempcards = [...cards]\n        const itemFinder1 = tempcards.findIndex(item => item.id === firstCardId)\n        const itemFinder2 = tempcards.findIndex(item => item.id === secondCardId)\n\n        tempcards[itemFinder1].found = true\n        tempcards[itemFinder2].found = true\n\n        setCards([...tempcards])\n    }\n\n  return (\n    <section className=\"memory-game\">\n        {console.log(cards)}\n        {cards.map(item => <Card key={item.id} card={item} onClick={()=> cardClick(item.id)}/> )}\n\n    </section>\n  );\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}